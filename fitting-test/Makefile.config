################################################################
# Build notes
################################################################

# Requires a recent gcc, e.g.:
#   . /opt/rh/devtoolset-2/enable
# This is also needed for icc as it uses gcc headers.

################################################################
# Configuration section
################################################################

# -1. What to build
# Define to also build for the old MIC (KNC), only works with icc.
# KNC_BUILD := 1
# Define to build for AVX_512, the new mic (KNL) and latest generation Xeons.
# AVX_512 := 1

# 0. Use gcc-5 from MacPorts on OSX
# OSXGCC5    := yes
# Use clang from MacPorts on OSX
# OSXMPCLANG   := yes

# 1. Use ROOT or not (never used on MIC)
# Comment out to disable root ("yes" is not relevant)
#WITH_ROOT := yes

# 2. Use gcc (clang by default on mac) or icc
# Comment out to force using standard c++. For mic only icc can be used.
ifdef INTEL_LICENSE_FILE
# Define ICC to make it easier to switch to icpc
ICC := icpc
CXX := ${ICC}
else ifdef OSXGCC5
  CXX := c++-mp-5
  TBB_PREFIX := /opt/local
else ifdef OSXMPCLANG
  CXX := clang++-mp-3.9 -Wall -Wno-unknown-pragmas -Wno-missing-braces
  TBB_PREFIX := /opt/local
endif

# 2.1 Use nvcc to compile cuda code
# Using the CUB library for standard GPU algorithm http://nvlabs.github.io/cub/
# It's header only and potentially exported by the environment
# Maybe it is good enough to have:
CUBROOT?=$CUDAINCDIR
# CUDAINCDIR and CUDALIBDIR also need to be defined
ifneq (,$(realpath /home/ml15/tools/cub))
	CUBROOT?=/home/ml15/tools/cub
else ifneq (,$(realpath /nfs/opt/cuda-8-0/include))
	CUBROOT?=/nfs/opt/cuda-8-0/include
else ifneq (,$(realpath /usr/local/cuda/include))
	CUBROOT?=/usr/local/cuda/include
endif
NV := nvcc -prec-sqrt=true -I${CUBROOT} 
#-g -G -lineinfo
# Comment out to compile for CPU
USE_CUDA := yes
# For CUDA: Also need to change maxCandsPerSeed to 8 and nEtaPart to 1
#USE_MPI := yes
ifdef USE_MPI
	CXX := mpic++
endif

# 3. Optimization
# -O3 implies vectorization and simd (but not AVX)
OPT := -O3 -g

# 4. Vectorization settings
VEC_GCC  := # -mavx # -fopt-info-vec
ifdef AVX_512
VEC_ICC  := -xMIC-AVX512
else
VEC_ICC  := -mavx
endif
VEC_MIC  := -mmic

# 9. Check track state propagation for success, turns on simple
# checks of filter convergence
USE_STATE_VALIDITY_CHECKS := -DCHECKSTATEVALID

# 10. Turn on multiple scattering
#USE_SCATTERING := -DSCATTERING

# 11. In track building, use linear interpolation across a
# a volume instead of using the geometry
USE_LINEAR_INTERPOLATION := -DLINEARINTERP

# 12. Use built tracks for fitting, comment out to fit sim tracks
ENDTOEND := -DENDTOEND

# 13. Intel Threading Building Blocks.  With icc uses system
# TBB, otherwise requires a local installation, and paths will
# have to be adjusted.
WITH_TBB := yes

# 14. Use for eta-phi segmentation
USE_ETA_SEGMENTATION := -DETASEG

# 15. Generate flat in eta (originally just flat in pz)
GEN_FLAT_ETA := -DGENFLATETA

# 16. Use inward fit in Conformal fit + final KF Fit
INWARD_FIT := -DINWARDFIT

# 17. Super debug mode --> allows really deep exploration of all props/updates etc with single track events, no skipping, in SMatrix, "yes" is irrevelant
#SUPER_DEBUG := yes

################################################################
# Derived settings
################################################################

CPPFLAGS := -I. -std=c++11
CXXFLAGS := ${OPT} ${OSX_CXXFLAGS}

LDFLAGS_HOST := 
LDFLAGS_MIC  :=

ifdef USE_CUDA
	CPPFLAGS += -DUSE_CUDA -I${CUBROOT} -I${CUDAINCDIR} #-g -G -lineinfo
	#LDFLAGS_HOST += -L${CUDALIBDIR}
	ifeq ($(CXX),icpc)
	  CXXFLAGS += -qopenmp
	  LDFLAGS  += -qopenmp
	else
	  CXXFLAGS += -fopenmp
	  LDFLAGS  += -fopenmp
	endif
endif

ifdef USE_MPI
	CPPFLAGS += -DUSE_MPI
endif
#CXXFLAGS += -qopenmp
#LDFLAGS += -qopenmp

CPPFLAGS += ${USE_STATE_VALIDITY_CHECKS} ${USE_SCATTERING} ${USE_LINEAR_INTERPOLATION} ${ENDTOEND} ${USE_ETA_SEGMENTATION} ${INWARD_FIT} ${GEN_FLAT_ETA}

ifdef USE_VTUNE_NOTIFY
  ifdef VTUNE_AMPLIFIER_XE_2017_DIR
    CPPFLAGS += -I$(VTUNE_AMPLIFIER_XE_2017_DIR)/include -DUSE_VTUNE_PAUSE
    LDFLAGS_HOST += -L$(VTUNE_AMPLIFIER_XE_2017_DIR)/lib64 -littnotify
    LDFLAGS_MIC  += -L$(VTUNE_AMPLIFIER_XE_2017_DIR)/bin64/k1om -littnotify
  endif
endif

ifneq (${CXX}, ${ICC})
  #CXXFLAGS += -Wall -Wno-unknown-pragmas
#   KNC_BUILD :=
endif

ifeq (${CXX}, ${ICC})
  VEC_HOST := ${VEC_ICC}
  CXXFLAGS += -qopt-report
else
  VEC_HOST := ${VEC_GCC}
endif

ifdef WITH_USOLIDS
  CPPFLAGS += -DWITH_USOLIDS
  LIBUSOLIDS := USolids-host/libusolids.a
  LIBUSOLIDS_MIC := USolids-mic/libusolids.a
  CMAKEFLAGS := -DCMAKE_CXX_COMPILER:STRING=${CXX} -DCMAKE_CXX_FLAGS:STRING="${CXXFLAGS} ${VEC_HOST}"
  CMAKEFLAGS_MIC := -DCMAKE_CXX_COMPILER:STRING=${CXX} -DCMAKE_CXX_FLAGS:STRING="${CXXFLAGS} ${VEC_MIC}"
endif

# Try to find a new enough TBB
ifneq ($(CXX),icc)
  ifndef TBB_PREFIX
    ifdef CMSSW_BASE
      CPPFLAGS += -I$(shell cd $$CMSSW_BASE && scram tool tag tbb INCLUDE)
      LDFLAGS_HOST += -L$(shell cd $$CMSSW_BASE && scram tool tag tbb LIBDIR)
      NVCCFLAGS += -I$(shell cd $$CMSSW_BASE && scram tool tag tbb INCLUDE)
      CPPFLAGS += -I$(shell cd $$CMSSW_BASE && scram tool tag cuda INCLUDE)
      CUDAINCDIR += $(shell cd $$CMSSW_BASE && scram tool tag cuda INCLUDE)
      LDFLAGS_HOST += -L$(shell cd $$CMSSW_BASE && scram tool tag cuda LIBDIR)
    endif
  endif
endif

ifdef WITH_TBB
  # icc finds tbb in its own installation
  ifneq (${CXX}, ${ICC})
    ifdef TBB_PREFIX
      CPPFLAGS += -I${TBB_PREFIX}/include
      LDFLAGS  += -L${TBB_PREFIX}/lib -Wl,-rpath,${TBB_PREFIX}/lib -L$(CUDALIBDIR) -Wl,-rpath,$(CUDALIBDIR)
			NVCCFLAGS += -I${TBB_PREFIX}/include
    # else use the system version
    endif
  endif
  CPPFLAGS += -DTBB
  LDFLAGS  += -ltbb
endif

CPPFLAGS_NO_ROOT := ${CPPFLAGS} -DNO_ROOT
LDFLAGS_NO_ROOT  := ${LDFLAGS}

ifdef WITH_ROOT
  CPPFLAGS += $(shell root-config --cflags)
  LDFLAGS  += $(shell root-config --libs)
else
  CPPFLAGS += -DNO_ROOT
endif

ifdef SUPER_DEBUG
  CPPFLAGS := -I. -DCHECKSTATEVALID -DLINEARINTERP -DETASEG -DINWARDFIT -DGENFLATETA $(shell root-config --cflags)
  CXXFLAGS := -O3 -g
  LDFLAGS  := $(shell root-config --libs)
endif

################################################################
# Dependency generation
################################################################

DEPEND_TGTS = -MQ '$(patsubst %.d,%.o,$@)'

ifdef KNC_BUILD
  DEPEND_TGTS += -MQ '$(patsubst %.d,%.om,$@)'
endif

# With icc use gcc for dependency generation. Check if this is still true with icc-16.
# MT-2016-08-30: icc 16.0.3 seems ok. Leaving this here until we update phiphi.

ifeq (${CXX}, ${ICC})
  MAKEDEPEND = gcc    -MM -MG ${DEPEND_TGTS} ${CPPFLAGS}
else
  MAKEDEPEND = ${CXX} -MM -MG ${DEPEND_TGTS} ${CPPFLAGS}
endif

%.d: %.cc
	${MAKEDEPEND} -o $@ $<
